-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple library for Scotty sessions and authorization
--   
--   Simple library for session adding and checking, with automatic SQLite
--   backup of session store. The store is stored in memory for fast
--   access. Session cookie expiration and database syncing timing are
--   configurable.
@package scotty-login-session
@version 0.1.0.0


-- | A Simple library for session adding and checking, with automatic
--   SQLite backup of session store. The session store is kept in memory
--   for fast access. Session cookie expiration and database syncing timing
--   are configurable. Note that this packages does not handle user
--   authorization; you will have to roll your own (the package persistent
--   is recommended) or use another package.
--   
--   Example usage:
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings   #-}
--   {-# LANGUAGE ScopedTypeVariables #-}
--   
--   module Main where
--   import qualified Data.Text.Lazy           as T
--   import           Web.Scotty               as S
--   import           Web.Scotty.Login.Session
--   
--   conf :: SessionConfig
--   conf = defaultSessionConfig
--   
--   main :: IO ()
--   main = do
--     initializeCookieDb conf
--     scotty 8000 routes
--   
--   routes :: ScottyM ()
--   routes = do
--     S.get "/denied" $ S.text "access denied"
--     S.get "/login" $ do S.html $ T.pack $ unlines $
--                           [ "&lt;form method=\"POST\" action=\"/login\"&gt;"
--                           , "&lt;input type=\"text\" name=\"username\"&gt;"
--                           , "&lt;input type=\"password\" name=\"password\"&gt;"
--                           , "&lt;input type=\"submit\" name=\"login\" value=\"login\"&gt;"
--                           , "&lt;/form&gt;" ]
--     S.post "/login" $ do
--       (usn :: String) &lt;- param "username"
--       (pass :: String) &lt;- param "password"
--       if usn == "guest" &amp;&amp; pass == "password"
--         then do addSession conf
--                 redirect "/authed"
--         else do redirect "/denied"
--     S.get "/authcheck" $ authCheck (redirect "/denied") $
--       S.text "authorized"
--   </pre>
module Web.Scotty.Login.Session

-- | Reload the session database into memory, and fork the database sync
--   and cleanup thread. This must be called before invoking scotty.
initializeCookieDb :: SessionConfig -> IO ()

-- | Add a session. This gives the user a SessionId cookie, and inserts a
--   corresponding entry into the session store. It also returns the
--   Session that was just inserted.
addSession :: SessionConfig -> ActionT Text IO (Maybe Session)

-- | Check whether a user is authorized.
--   
--   Example usage:
--   
--   <pre>
--   S.get "/auth_test" $ authCheck (redirect "/denied") $
--     S.text "authorized"
--   </pre>
authCheck :: (MonadIO m, ScottyError e) => ActionT e m () -> ActionT e m () -> ActionT e m ()

-- | Check whether a user is authorized, and return the Session that they
--   are authorized for
--   
--   Example usage:
--   
--   <pre>
--   S.get "/auth_test" $ authCheck (redirect "/denied") $
--     s -&gt; S.text $ "authorized as " ++ show s
--   </pre>
authCheckWithSession :: (MonadIO m, ScottyError e) => ActionT e m () -> (Session -> ActionT e m ()) -> ActionT e m ()

-- | Configuration for the session database.
data SessionConfig
SessionConfig :: String -> NominalDiffTime -> NominalDiffTime -> Bool -> SessionConfig

-- | Path to SQLite database file
[dbPath] :: SessionConfig -> String

-- | Time between syncs to database (seconds)
[syncInterval] :: SessionConfig -> NominalDiffTime

-- | Cookie expiration time (seconds)
[expirationInterval] :: SessionConfig -> NominalDiffTime

-- | Debug Mode (extra logging)
[debugMode] :: SessionConfig -> Bool
data Session
Session :: !Text -> !UTCTime -> Session
[sessionSid] :: Session -> !Text
[sessionExpiration] :: Session -> !UTCTime

-- | Default settings for the session store. May not be suitable for all
--   applications.
--   
--   They are:
--   
--   <ul>
--   <li>dbPath = "sessions.sqlite",</li>
--   <li>syncInterval = 1200 seconds (30 minutes),</li>
--   <li>expirationInterval = 86400 seconds (1 day)</li>
--   <li>debugMode = False</li>
--   </ul>
defaultSessionConfig :: SessionConfig
